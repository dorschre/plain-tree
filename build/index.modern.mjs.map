{"version":3,"file":"index.modern.mjs","sources":["../src/utils.ts","../src/utilsNodeTree.ts","../src/Tree.ts","../src/Node.ts","../src/create.ts"],"sourcesContent":["export const nodeData = (node: any): any => {\n  return node && 'data' in node ? node.data : node;\n};\n\nexport const nodesData = (nodes: Array<any>): any => {\n  return nodes.map(nodeData);\n};\n\nexport const hasChildren = (node: any): boolean => {\n  return Boolean(node && node.children && node.children.length);\n};\n\nconst generateChars = (length: number): string => {\n  const random11Chars = (): string =>\n    Math.random()\n      .toString(36)\n      .substring(2, 15);\n  let chars = '';\n  while (chars.length < length) {\n    chars += random11Chars();\n  }\n  return chars.slice(0, length);\n};\n\nexport const generateId = (): string => {\n  return generateChars(36);\n};\n\nexport const firstArrayElement = (arr: any): any => {\n  return Array.isArray(arr) && arr.length ? arr[0] : null;\n};\n\n/*\n * Return a new object without properties in disallowedKeys\n */\nexport const filterObject = (\n  obj: object,\n  { disallowedKeys = [] }: { disallowedKeys: Array<string> }\n): object => {\n  const filteredObj = Object.keys(obj)\n    .filter(key => !disallowedKeys.includes(key))\n    .reduce((o, key) => {\n      o[key] = obj[key];\n      return o;\n    }, {});\n  return filteredObj;\n};\n","/*\n * Common Node and Tree utilities\n */\nimport { NodeOrNull, SerializedNode } from './types';\nimport { hasChildren } from './utils';\nimport Node from './Node';\n\nexport const nodeToJsonFormatter = (node: Node): SerializedNode => {\n  const { parent, data, children, id } = node;\n  const obj: SerializedNode = {\n    data,\n    children,\n    id,\n    parentId: null\n  };\n  parent && (obj.parentId = parent.id);\n  obj.children = (node.children as Node[]).map(\n    (child: Node): SerializedNode => nodeToJsonFormatter(child)\n  );\n  return obj;\n};\n\nexport const widthsByHeight = (node: NodeOrNull): Array<number> => {\n  if (node === null) {\n    return [1];\n  } else {\n    const counter = [1];\n    let currentQueue = [node];\n    let nextQueue: NodeOrNull[] = [];\n    do {\n      while (currentQueue.length) {\n        const node = currentQueue.pop();\n        hasChildren(node) && nextQueue.push(...node.children);\n      }\n      if (nextQueue.length) {\n        counter[counter.length] = nextQueue.length;\n      }\n      [nextQueue, currentQueue] = [currentQueue, nextQueue];\n    } while (currentQueue.length);\n    return counter;\n  }\n};\n\nexport const flattenByHeight = (\n  node: NodeOrNull,\n  fn: Function | null = null\n): any[][] => {\n  let currentQueue = [node];\n  let nextQueue: NodeOrNull[] = [];\n  const result = [[fn(node)]];\n  do {\n    while (currentQueue.length) {\n      const node = currentQueue.pop();\n      hasChildren(node) && nextQueue.push(...node.children);\n    }\n    if (nextQueue.length) {\n      // explicit argument passing to fn to placate TypeScript\n      if (fn) {\n        result[result.length] = nextQueue.map(node => fn(node));\n      } else {\n        result[result.length] = nextQueue;\n      }\n    }\n    [nextQueue, currentQueue] = [currentQueue, nextQueue];\n  } while (currentQueue.length);\n  return result;\n};\n","import Node from './Node';\nimport { nodeData, hasChildren, firstArrayElement } from './utils';\nimport { widthsByHeight, flattenByHeight } from './utilsNodeTree';\nimport { NodeOrNull } from './types';\n\ntype TraverseReturn = void | boolean | Array<NodeOrNull>;\ntype TraverseOptions = {\n  some?: boolean;\n  every?: boolean;\n  returnBoolean?: boolean;\n  returnArray?: boolean;\n};\n\nclass Tree {\n  constructor(public root: NodeOrNull = null) {\n    this.root = root;\n  }\n\n  private _traverse(\n    fn: Function,\n    { some, every, returnBoolean, returnArray }: TraverseOptions = {},\n    queueMethod: string\n  ): TraverseReturn {\n    const queue = [this.root];\n    const results: Array<NodeOrNull> = [];\n    let didBreak = false;\n    let lastResult: undefined | boolean;\n    while (queue.length) {\n      const node = queue.shift();\n      hasChildren(node) && queue[queueMethod](...node.children);\n      if (some || every) {\n        const result = fn(node);\n        if (result && returnArray) {\n          results.push(node);\n        }\n        if ((every && !result) || (some && result)) {\n          didBreak = true;\n          lastResult = result;\n          break;\n        }\n      } else {\n        fn(node);\n      }\n    }\n    if (every) {\n      if (returnBoolean) {\n        return !didBreak;\n      } else if (returnArray) {\n        return results;\n      }\n    } else if (some) {\n      if (returnBoolean) {\n        return Boolean(lastResult);\n      } else if (returnArray) {\n        return results;\n      }\n    }\n  }\n\n  private _traverseBreathFirst(\n    fn: Function,\n    opts?: TraverseOptions\n  ): TraverseReturn {\n    return this._traverse(fn, opts, 'push');\n  }\n\n  private _traverseDepthFirst(\n    fn: Function,\n    opts?: TraverseOptions\n  ): TraverseReturn {\n    return this._traverse(fn, opts, 'unshift');\n  }\n\n  traverseBreathFirst(fn: Function): TraverseReturn {\n    this._traverseBreathFirst(fn);\n  }\n\n  /*\n   * Hit the bottom of the tree as fast as possible\n   * Then go up and get parent's children, then go down again\n   */\n  traverseDepthFirst(fn: Function): TraverseReturn {\n    this._traverseDepthFirst(fn);\n  }\n\n  /*\n   * Return true if a single node is truthy for fn, else false\n   * exit early on first truthy value\n   */\n  someBreathFirst(fn: Function): boolean {\n    return Boolean(\n      this._traverseBreathFirst(fn, {\n        some: true,\n        returnBoolean: true\n      })\n    );\n  }\n\n  /*\n   * Return true if a single node is truthy for fn, else false\n   * exit early on first truthy value\n   */\n  someDepthFirst(fn: Function): boolean {\n    return Boolean(\n      this._traverseDepthFirst(fn, {\n        some: true,\n        returnBoolean: true\n      })\n    );\n  }\n\n  /*\n   * Return true if result of function for every node is truthy\n   * exit early on first function falsey value\n   */\n  everyBreathFirst(fn: Function): boolean {\n    return Boolean(\n      this._traverseDepthFirst(fn, {\n        every: true,\n        returnBoolean: true\n      })\n    );\n  }\n\n  /*\n   * Return true if result of function for every node is truthy\n   * exit early on first function falsey value\n   */\n  everyDepthFirst(fn: Function): boolean {\n    return Boolean(\n      this._traverseDepthFirst(fn, { every: true, returnBoolean: true })\n    );\n  }\n\n  findOneBreathFirst(fn: Function): NodeOrNull {\n    const result = this._traverseBreathFirst(fn, {\n      some: true,\n      returnArray: true\n    });\n    return firstArrayElement(result);\n  }\n\n  findOneDepthFirst(fn: Function): NodeOrNull {\n    const result = this._traverseDepthFirst(fn, {\n      some: true,\n      returnArray: true\n    });\n    return firstArrayElement(result);\n  }\n\n  findAllBreathFirst(fn: Function): Array<NodeOrNull> {\n    const result = this._traverseBreathFirst(fn, {\n      every: true,\n      returnArray: true\n    });\n    return Array.isArray(result) ? result : [];\n  }\n\n  findAllDepthFirst(fn: Function): Array<NodeOrNull> {\n    const result = this._traverseDepthFirst(fn, {\n      every: true,\n      returnArray: true\n    });\n    return Array.isArray(result) ? result : [];\n  }\n\n  flatMap(fn: Function | null = null): Array<any> {\n    const acc: Array<any> = [];\n    this._traverseBreathFirst((node: Node) => {\n      (fn && acc.push(fn(node))) || acc.push(node);\n    });\n    return acc;\n  }\n\n  flattenData(): Array<any> {\n    return this.flatMap(nodeData);\n  }\n\n  flattenByHeight(fn: Function | null = null): any[][] {\n    return flattenByHeight(this.root, fn);\n  }\n\n  flattenDataByHeight(): any[][] {\n    return this.flattenByHeight(nodeData);\n  }\n\n  /*\n   * Get the width of each height of the tree from top to bottom\n   */\n  widthsByHeight(): Array<number> {\n    return widthsByHeight(this.root);\n  }\n\n  /*\n   * Root has height 0\n   */\n  nodesAtHeight(height: number): Array<NodeOrNull> {\n    const counter = this.root ? [1] : [];\n    let currentQueue = [this.root];\n    if (counter.length === height) {\n      return currentQueue;\n    }\n    let nextQueue: NodeOrNull[] = [];\n    do {\n      while (currentQueue.length) {\n        const node = currentQueue.pop();\n        hasChildren(node) && nextQueue.push(...node.children);\n      }\n      if (counter.length === height) {\n        return nextQueue;\n        break;\n      } else {\n        if (nextQueue.length) {\n          counter[counter.length] = nextQueue.length;\n        }\n        [nextQueue, currentQueue] = [currentQueue, nextQueue];\n      }\n    } while (currentQueue.length);\n    return [];\n  }\n\n  countNodes(): number {\n    return this.widthsByHeight().reduce((acc, curr) => acc + curr, 0);\n  }\n\n  maxWidth(): number {\n    return Math.max(...this.widthsByHeight());\n  }\n\n  height(): number {\n    return this.root ? this.root.height() : 0;\n  }\n\n  toJson(): string {\n    return this.root ? this.root.toJson() : '';\n  }\n}\n\nexport default Tree;\n","import { generateId } from './utils';\nimport {\n  nodeToJsonFormatter,\n  widthsByHeight,\n  flattenByHeight\n} from './utilsNodeTree';\nimport { NodeOrNull } from './types';\n\nclass Node {\n  data: any;\n  children: Node[] = [];\n  id: string;\n  value: string;\n  label: string;\n  parent: NodeOrNull;\n\n  constructor(\n    data: any,\n    { id, parent }: { id?: string; parent?: NodeOrNull } = {}\n  ) {\n    this.id = id !== undefined ? id : generateId();\n    this.parent = parent || null;\n    \n    this.value = id;\n    if (\"label\" in data){\n    this.label = data.label;\n    } else {this.label = id}\n    this.data = data;\n    this.children = [];\n  }\n\n  addChild(data: any, { id }: { id?: string } = {}): Node {\n    const node = new Node(data, { id, parent: this });\n    this.children.push(node);\n    return node;\n  }\n\n  private _removeChildren(fn: Function): Array<Node> {\n    const removedChildren: Array<Node> = [];\n    this.children = this.children.filter(node => {\n      if (fn(node)) {\n        removedChildren.push(node);\n        return false;\n      }\n      return true;\n    });\n    return removedChildren;\n  }\n\n  removeChildren(fn: Function): Array<Node> {\n    return this._removeChildren(fn);\n  }\n\n  removeChildrenByData(data: any): Array<Node> {\n    const fn: Function = (node: Node) => node.data === data;\n    return this._removeChildren(fn);\n  }\n\n  removeChildrenById(id: string): Array<Node> {\n    const fn: Function = (node: Node) => node.id === id;\n    return this._removeChildren(fn);\n  }\n\n  isLeaf(): boolean {\n    return this.parent !== null && !Boolean(this.children.length);\n  }\n\n  hasChildren(): boolean {\n    return Boolean(this.children.length);\n  }\n\n  toJson(): string {\n    const objectToSerialize = nodeToJsonFormatter(this);\n    return JSON.stringify(objectToSerialize);\n  }\n\n  depth(): number {\n    if (!this.parent) {\n      return 0;\n    } else {\n      let depth = 0;\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      let currentNode: Node = this;\n      while (currentNode.parent) {\n        depth += 1;\n        currentNode = currentNode.parent;\n      }\n      return depth;\n    }\n  }\n\n  widthsByHeight(): Array<number> {\n    return widthsByHeight(this);\n  }\n\n  height(): number {\n    return this.widthsByHeight().length - 1;\n  }\n\n  flattenByHeight(fn: Function | null = null): any[][] {\n    return flattenByHeight(this, fn);\n  }\n}\n\nexport default Node;\n","import {\n  NodeOrNull,\n  CreateOptions,\n  CreateOptionsWithCustomChildrenKey,\n  ObjectAnyProperties\n} from './types';\nimport Tree from './Tree';\nimport Node from './Node';\nimport { filterObject } from './utils';\n\nconst ID_KEY_DEFAULT = 'id';\nconst PARENT_ID_KEY_DEFAULT = 'parentId';\nconst CHILDREN_KEY_DEFAULT = 'children';\n\n/*\n * Create an array of objects representing a tree\n * Return array (as tree may have multiple roots).\n * Takes a flat array that looks like this:\n * [\n *   {\n *     id: 'sports',\n *     name: 'Sports',\n *     parentId: null\n *   },\n *   {\n *     id: 'ball',\n *     name: 'Ball',\n *     parentId: 'sports'\n *   },\n *   {\n *     id: 'non-ball',\n *     name: 'Non Ball',\n *     parentId: 'sports'\n *   },\n *   {\n *     id: 'tennis',\n *     name: 'Tennis',\n *     parentId: 'ball'\n *   }\n * ];\n * Returns a tree array that looks like this\n * [\n *   {\n *     \"id\": \"sports\",\n *     \"name\": \"Sports\",\n *     \"parentId\": null,\n *     \"children\": [\n *       {\n *         \"id\": \"ball\",\n *         \"name\": \"Ball\",\n *         \"parentId\": \"sports\",\n *         \"children\": [\n *           {\n *             \"id\": \"tennis\",\n *             \"name\": \"Tennis\",\n *             \"parentId\": \"ball\",\n *             \"children\": []\n *           }\n *         ]\n *       },\n *       {\n *         \"id\": \"non-ball\",\n *         \"name\": \"Non Ball\",\n *         \"parentId\": \"sports\",\n *         \"children\": []\n *       }\n *     ]\n *   }\n * ]\n */\nexport const createTreeArrayFromFlatArray = (\n  data: Array<ObjectAnyProperties>,\n  {\n    idKey = ID_KEY_DEFAULT,\n    parentIdKey = PARENT_ID_KEY_DEFAULT,\n    childrenKey = CHILDREN_KEY_DEFAULT\n  }: CreateOptionsWithCustomChildrenKey = {}\n): Array<ObjectAnyProperties> => {\n  const treeArray: Array<ObjectAnyProperties> = [];\n  const childrenOf = {};\n  data.forEach((obj: any) => {\n    const id = obj[idKey];\n    const parentId = obj[parentIdKey];\n    // obj may have children\n    childrenOf[id] = childrenOf[id] || [];\n    // init obj's children\n    obj[childrenKey] = childrenOf[id];\n    if (parentId) {\n      // init obj's parent's children object\n      childrenOf[parentId] = childrenOf[parentId] || [];\n      // push obj into its parent's children object\n      childrenOf[parentId].push(obj);\n    } else {\n      treeArray.push(obj);\n    }\n  });\n  return treeArray;\n};\n\n/*\n * Take an object that looks like a node, and turn it into a node.\n * Take all properties from obj that aren't in disallowedKeys and set as\n * 'data' on the node.\n */\nexport const objectToNode = (\n  obj: object,\n  parent: NodeOrNull = null,\n  {\n    idKey = ID_KEY_DEFAULT,\n    parentIdKey = PARENT_ID_KEY_DEFAULT,\n    childrenKey = CHILDREN_KEY_DEFAULT\n  }: CreateOptionsWithCustomChildrenKey = {}\n): Node => {\n  const disallowedKeys = [idKey, parentIdKey, childrenKey];\n  const data = filterObject(obj, { disallowedKeys });\n  if (parent) {\n    return parent.addChild(data, { id: obj[idKey] });\n  } else {\n    return new Node(data, { id: obj[idKey] });\n  }\n};\n\n/*\n * Create a node for each element in an array, then recursively create child nodes\n */\nexport const createNodes = (\n  data: Array<ObjectAnyProperties>,\n  parentNode: NodeOrNull = null,\n  opts: CreateOptionsWithCustomChildrenKey = {}\n): void => {\n  if (!data.length) {\n    return;\n  }\n  const { childrenKey = CHILDREN_KEY_DEFAULT } = opts;\n  data.forEach(obj => {\n    const node = objectToNode(obj, parentNode, opts);\n    // create all the nodes for the children of this node, with this node as parent\n    createNodes(obj[childrenKey], node, opts);\n  });\n};\n\n/*\n * Tree array to supply (example):\n * [\n *   {\n *     \"id\": \"sports\",\n *     \"name\": \"Sports\",\n *     \"parentId\": null,\n *     \"children\": [\n *       {\n *         \"id\": \"ball\",\n *         \"name\": \"Ball\",\n *         \"parentId\": \"sports\",\n *         \"children\": [\n *           {\n *             \"id\": \"tennis\",\n *             \"name\": \"Tennis\",\n *             \"parentId\": \"ball\",\n *             \"children\": []\n *           }\n *         ]\n *       },\n *       {\n *         \"id\": \"non-ball\",\n *         \"name\": \"Non Ball\",\n *         \"parentId\": \"sports\",\n *         \"children\": []\n *       }\n *     ]\n *   }\n * ]\n * Return a Tree instance\n */\nexport const createTreeFromTreeArray = (\n  data: Array<ObjectAnyProperties>,\n  opts: CreateOptionsWithCustomChildrenKey = {}\n): Tree => {\n  if (!data.length) {\n    return new Tree();\n  } else if (data.length > 1) {\n    // TODO: add this feature\n    throw new Error(\n      'Converting an array to tree only accepts an array with 0 or 1 node currently'\n    );\n  }\n  const { childrenKey = CHILDREN_KEY_DEFAULT } = opts;\n  const rootObj = data[0];\n  const root = objectToNode(rootObj, null, opts);\n  const tree = new Tree(root);\n  createNodes(rootObj[childrenKey], root, opts);\n  return tree;\n};\n\n/*\n * Map the supplied array of objects to what is required required for Node creation\n */\nconst mapFlatArray = (\n  data: Array<ObjectAnyProperties>,\n  { idKey, parentIdKey }: CreateOptions = {}\n): Array<ObjectAnyProperties> => {\n  if (idKey || parentIdKey) {\n    const disallowedKeys = [\n      ...(idKey ? [idKey] : []),\n      ...(parentIdKey ? [parentIdKey] : [])\n    ];\n    return data.map(obj => {\n      const newObj = filterObject(obj, { disallowedKeys });\n      idKey && (newObj[ID_KEY_DEFAULT] = obj[idKey]);\n      parentIdKey && (newObj[PARENT_ID_KEY_DEFAULT] = obj[parentIdKey]);\n      return newObj;\n    });\n  }\n  return data;\n};\n\n/*\n * Flat array to supply example:\n * [\n *   {\n *     id: 'sports',\n *     name: 'Sports',\n *     parentId: null\n *   },\n *   {\n *     id: 'ball',\n *     name: 'Ball',\n *     parentId: 'sports'\n *   },\n *   {\n *     id: 'non-ball',\n *     name: 'Non Ball',\n *     parentId: 'sports'\n *   },\n *   {\n *     id: 'tennis',\n *     name: 'Tennis',\n *     parentId: 'ball'\n *   }\n * ];\n */\nexport const createTreeFromFlatArray = (\n  data: Array<ObjectAnyProperties>,\n  opts: CreateOptions = {}\n): any => {\n  const mappedFlatArray = mapFlatArray(data, opts);\n  const treeArray: Array<ObjectAnyProperties> = createTreeArrayFromFlatArray(\n    mappedFlatArray\n  );\n  if (!treeArray.length) {\n    return new Tree();\n  } else if ((treeArray.length = 1)) {\n    return createTreeFromTreeArray(treeArray);\n  } else {\n    // TODO: add functionality\n    throw new Error(\n      'Converting an array to tree only accepts an array with 0 or 1 node currently'\n    );\n  }\n};\n"],"names":["nodeData","node","data","nodesData","nodes","map","hasChildren","Boolean","children","length","chars","Math","random","toString","substring","slice","generateChars","firstArrayElement","arr","Array","isArray","filterObject","obj","disallowedKeys","Object","keys","filter","key","includes","reduce","o","nodeToJsonFormatter","parent","id","parentId","child","widthsByHeight","counter","currentQueue","pop","nextQueue","push","flattenByHeight","fn","result","constructor","root","this","_traverse","some","every","returnBoolean","returnArray","queueMethod","results","didBreak","queue","shift","lastResult","_traverseBreathFirst","opts","_traverseDepthFirst","traverseBreathFirst","traverseDepthFirst","someBreathFirst","someDepthFirst","everyBreathFirst","everyDepthFirst","findOneBreathFirst","findOneDepthFirst","findAllBreathFirst","findAllDepthFirst","flatMap","acc","flattenData","flattenDataByHeight","nodesAtHeight","height","countNodes","curr","maxWidth","max","toJson","Node","value","label","undefined","generateId","addChild","_removeChildren","removedChildren","removeChildren","removeChildrenByData","removeChildrenById","isLeaf","objectToSerialize","stringify","depth","currentNode","ID_KEY_DEFAULT","PARENT_ID_KEY_DEFAULT","CHILDREN_KEY_DEFAULT","createTreeArrayFromFlatArray","idKey","parentIdKey","childrenKey","treeArray","childrenOf","forEach","objectToNode","createNodes","parentNode","Tree","Error","rootObj","tree","createTreeFromFlatArray","mappedFlatArray","newObj","mapFlatArray","createTreeFromTreeArray"],"mappings":"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"}