{"version":3,"file":"index.modern.mjs","sources":["../src/utils.ts","../src/utilsNodeTree.ts","../src/Tree.ts","../src/Node.ts","../src/create.ts"],"sourcesContent":["export const nodeData = (node: any): any => {\n  return node && 'data' in node ? node.data : node;\n};\n\nexport const nodesData = (nodes: Array<any>): any => {\n  return nodes.map(nodeData);\n};\n\nexport const hasChildren = (node: any): boolean => {\n  return Boolean(node && node.children && node.children.length);\n};\n\nconst generateChars = (length: number): string => {\n  const random11Chars = (): string =>\n    Math.random()\n      .toString(36)\n      .substring(2, 15);\n  let chars = '';\n  while (chars.length < length) {\n    chars += random11Chars();\n  }\n  return chars.slice(0, length);\n};\n\nexport const generateId = (): string => {\n  return generateChars(36);\n};\n\nexport const firstArrayElement = (arr: any): any => {\n  return Array.isArray(arr) && arr.length ? arr[0] : null;\n};\n\n/*\n * Return a new object without properties in disallowedKeys\n */\nexport const filterObject = (\n  obj: object,\n  { disallowedKeys = [] }: { disallowedKeys: Array<string> }\n): object => {\n  const filteredObj = Object.keys(obj)\n    .filter(key => !disallowedKeys.includes(key))\n    .reduce((o, key) => {\n      o[key] = obj[key];\n      return o;\n    }, {});\n  return filteredObj;\n};\n","/*\n * Common Node and Tree utilities\n */\nimport { NodeOrNull, SerializedLeaf, SerializedNode } from './types';\nimport { hasChildren } from './utils';\nimport Node from './Node';\n\nexport const nodeToJsonFormatter = (node: Node): SerializedNode => {\n  const { parent, data, children, id, value, label } = node;\n\n  const obj: SerializedNode = {\n    data,\n    children,\n    id,\n    parentId: null,\n    value,\n    label\n  };\n\n  parent && (obj.parentId = parent.id);\n\n  obj.children = (node.children as Node[]).map(\n    (child: Node): SerializedNode => nodeToJsonFormatter(child)\n  );\n  return obj;\n};\n\nexport const nodeToObjectFormatter = (node: Node): any => {\n  const { parent, data, children, id, value, label } = node;\n  let obj: any = {\n    data,\n    id,\n    parentId: null,\n    value,\n    label\n  };\n\n  parent && (obj.parentId = parent.id);\n  if(children.length !== 0){\n    obj.children = (node.children as Node[]).map(\n      (child: Node): any => nodeToObjectFormatter(child)\n    );\n  }\n\n\n\n  return obj;\n};\n\nexport const widthsByHeight = (node: NodeOrNull): Array<number> => {\n  if (node === null) {\n    return [1];\n  } else {\n    const counter = [1];\n    let currentQueue = [node];\n    let nextQueue: NodeOrNull[] = [];\n    do {\n      while (currentQueue.length) {\n        const node = currentQueue.pop();\n        hasChildren(node) && nextQueue.push(...node.children);\n      }\n      if (nextQueue.length) {\n        counter[counter.length] = nextQueue.length;\n      }\n      [nextQueue, currentQueue] = [currentQueue, nextQueue];\n    } while (currentQueue.length);\n    return counter;\n  }\n};\n\nexport const flattenByHeight = (\n  node: NodeOrNull,\n  fn: Function | null = null\n): any[][] => {\n  let currentQueue = [node];\n  let nextQueue: NodeOrNull[] = [];\n  const result = [[fn(node)]];\n  do {\n    while (currentQueue.length) {\n      const node = currentQueue.pop();\n      hasChildren(node) && nextQueue.push(...node.children);\n    }\n    if (nextQueue.length) {\n      // explicit argument passing to fn to placate TypeScript\n      if (fn) {\n        result[result.length] = nextQueue.map(node => fn(node));\n      } else {\n        result[result.length] = nextQueue;\n      }\n    }\n    [nextQueue, currentQueue] = [currentQueue, nextQueue];\n  } while (currentQueue.length);\n  return result;\n};\n","import Node from './Node';\nimport { nodeData, hasChildren, firstArrayElement } from './utils';\nimport { widthsByHeight, flattenByHeight } from './utilsNodeTree';\nimport { NodeOrNull } from './types';\n\ntype TraverseReturn = void | boolean | Array<NodeOrNull>;\ntype TraverseOptions = {\n  some?: boolean;\n  every?: boolean;\n  returnBoolean?: boolean;\n  returnArray?: boolean;\n};\n\nclass Tree {\n  constructor(public root: NodeOrNull = null, public isChanged: Boolean = true) {\n    this.root = root;\n    this.isChanged = isChanged;\n  }\n\n  private _traverse(\n    fn: Function,\n    { some, every, returnBoolean, returnArray }: TraverseOptions = {},\n    queueMethod: string\n  ): TraverseReturn {\n    const queue = [this.root];\n    const results: Array<NodeOrNull> = [];\n    let didBreak = false;\n    let lastResult: undefined | boolean;\n    while (queue.length) {\n      const node = queue.shift();\n      hasChildren(node) && queue[queueMethod](...node.children);\n      if (some || every) {\n        const result = fn(node);\n        if (result && returnArray) {\n          results.push(node);\n        }\n        if ((every && !result) || (some && result)) {\n          didBreak = true;\n          lastResult = result;\n          break;\n        }\n      } else {\n        fn(node);\n      }\n    }\n    if (every) {\n      if (returnBoolean) {\n        return !didBreak;\n      } else if (returnArray) {\n        return results;\n      }\n    } else if (some) {\n      if (returnBoolean) {\n        return Boolean(lastResult);\n      } else if (returnArray) {\n        return results;\n      }\n    }\n  }\n\n  private _traverseBreathFirst(\n    fn: Function,\n    opts?: TraverseOptions\n  ): TraverseReturn {\n    return this._traverse(fn, opts, 'push');\n  }\n\n  private _traverseDepthFirst(\n    fn: Function,\n    opts?: TraverseOptions\n  ): TraverseReturn {\n    return this._traverse(fn, opts, 'unshift');\n  }\n\n  traverseBreathFirst(fn: Function): TraverseReturn {\n    this._traverseBreathFirst(fn);\n  }\n\n  /*\n   * Hit the bottom of the tree as fast as possible\n   * Then go up and get parent's children, then go down again\n   */\n  traverseDepthFirst(fn: Function): TraverseReturn {\n    this._traverseDepthFirst(fn);\n  }\n\n  /*\n   * Return true if a single node is truthy for fn, else false\n   * exit early on first truthy value\n   */\n  someBreathFirst(fn: Function): boolean {\n    return Boolean(\n      this._traverseBreathFirst(fn, {\n        some: true,\n        returnBoolean: true\n      })\n    );\n  }\n\n  /*\n   * Return true if a single node is truthy for fn, else false\n   * exit early on first truthy value\n   */\n  someDepthFirst(fn: Function): boolean {\n    return Boolean(\n      this._traverseDepthFirst(fn, {\n        some: true,\n        returnBoolean: true\n      })\n    );\n  }\n\n  /*\n   * Return true if result of function for every node is truthy\n   * exit early on first function falsey value\n   */\n  everyBreathFirst(fn: Function): boolean {\n    return Boolean(\n      this._traverseDepthFirst(fn, {\n        every: true,\n        returnBoolean: true\n      })\n    );\n  }\n\n  /*\n   * Return true if result of function for every node is truthy\n   * exit early on first function falsey value\n   */\n  everyDepthFirst(fn: Function): boolean {\n    return Boolean(\n      this._traverseDepthFirst(fn, { every: true, returnBoolean: true })\n    );\n  }\n\n  findOneBreathFirst(fn: Function): NodeOrNull {\n    const result = this._traverseBreathFirst(fn, {\n      some: true,\n      returnArray: true\n    });\n    return firstArrayElement(result);\n  }\n\n  findOneDepthFirst(fn: Function): NodeOrNull {\n    const result = this._traverseDepthFirst(fn, {\n      some: true,\n      returnArray: true\n    });\n    return firstArrayElement(result);\n  }\n\n  findAllBreathFirst(fn: Function): Array<NodeOrNull> {\n    const result = this._traverseBreathFirst(fn, {\n      every: true,\n      returnArray: true\n    });\n    return Array.isArray(result) ? result : [];\n  }\n\n  findAllDepthFirst(fn: Function): Array<NodeOrNull> {\n    const result = this._traverseDepthFirst(fn, {\n      every: true,\n      returnArray: true\n    });\n    return Array.isArray(result) ? result : [];\n  }\n\n  flatMap(fn: Function | null = null): Array<any> {\n    const acc: Array<any> = [];\n    this._traverseBreathFirst((node: Node) => {\n      (fn && acc.push(fn(node))) || acc.push(node);\n    });\n    return acc;\n  }\n\n  flattenData(): Array<any> {\n    return this.flatMap(nodeData);\n  }\n\n  flattenByHeight(fn: Function | null = null): any[][] {\n    return flattenByHeight(this.root, fn);\n  }\n\n  flattenDataByHeight(): any[][] {\n    return this.flattenByHeight(nodeData);\n  }\n\n  /*\n   * Get the width of each height of the tree from top to bottom\n   */\n  widthsByHeight(): Array<number> {\n    return widthsByHeight(this.root);\n  }\n\n  /*\n   * Root has height 0\n   */\n  nodesAtHeight(height: number): Array<NodeOrNull> {\n    const counter = this.root ? [1] : [];\n    let currentQueue = [this.root];\n    if (counter.length === height) {\n      return currentQueue;\n    }\n    let nextQueue: NodeOrNull[] = [];\n    do {\n      while (currentQueue.length) {\n        const node = currentQueue.pop();\n        hasChildren(node) && nextQueue.push(...node.children);\n      }\n      if (counter.length === height) {\n        return nextQueue;\n        break;\n      } else {\n        if (nextQueue.length) {\n          counter[counter.length] = nextQueue.length;\n        }\n        [nextQueue, currentQueue] = [currentQueue, nextQueue];\n      }\n    } while (currentQueue.length);\n    return [];\n  }\n\n  countNodes(): number {\n    return this.widthsByHeight().reduce((acc, curr) => acc + curr, 0);\n  }\n\n  maxWidth(): number {\n    return Math.max(...this.widthsByHeight());\n  }\n\n  height(): number {\n    return this.root ? this.root.height() : 0;\n  }\n\n  toJson(): string {\n    return this.root ? this.root.toJson() : '';\n  }\n\n  toObject(): any {\n    return this.root ? this.root.toObject() : [];\n  }\n}\n\nexport default Tree;\n","import { generateId } from './utils';\nimport {\n  nodeToJsonFormatter,\n  nodeToObjectFormatter,\n  widthsByHeight,\n  flattenByHeight\n} from './utilsNodeTree';\nimport { NodeOrNull } from './types';\n\nclass Node {\n  data: any;\n  children: Node[] = [];\n  id: string;\n  value: string;\n  label: string;\n  parent: NodeOrNull;\n\n  constructor(\n    data: any,\n    { id, parent }: { id?: string; parent?: NodeOrNull } = {}\n  ) {\n    this.id = id !== undefined ? id : generateId();\n    this.parent = parent || null;\n    \n    this.value = id;\n    if (\"label\" in data){\n    this.label = data.label;\n    } else {this.label = id}\n    this.data = data;\n    this.children = [];\n  }\n\n  addChild(data: any, { id }: { id?: string } = {}): Node {\n    const node = new Node(data, { id, parent: this });\n    this.children.push(node);\n    return node;\n  }\n\n  private _removeChildren(fn: Function): Array<Node> {\n    const removedChildren: Array<Node> = [];\n    this.children = this.children.filter(node => {\n      if (fn(node)) {\n        removedChildren.push(node);\n        return false;\n      }\n      return true;\n    });\n    return removedChildren;\n  }\n\n  removeChildren(fn: Function): Array<Node> {\n    return this._removeChildren(fn);\n  }\n\n  removeChildrenByData(data: any): Array<Node> {\n    const fn: Function = (node: Node) => node.data === data;\n    return this._removeChildren(fn);\n  }\n\n  removeChildrenById(id: string): Array<Node> {\n    const fn: Function = (node: Node) => node.id === id;\n    return this._removeChildren(fn);\n  }\n\n  isLeaf(): boolean {\n    return this.parent !== null && !Boolean(this.children.length);\n  }\n\n  hasChildren(): boolean {\n    return Boolean(this.children.length);\n  }\n\n  toJson(): string {\n    const objectToSerialize = nodeToJsonFormatter(this);\n\n    return JSON.stringify(objectToSerialize);\n  }\n\n  toObject(): any {\n    const res = [];\n    if(this.children.length !== 0 ){\n      for (let id = 0; id < this.children.length; id++){\n        res.push(nodeToObjectFormatter(this.children[id]))\n      }\n    }\n    return res;\n  }\n\n  depth(): number {\n    if (!this.parent) {\n      return 0;\n    } else {\n      let depth = 0;\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      let currentNode: Node = this;\n      while (currentNode.parent) {\n        depth += 1;\n        currentNode = currentNode.parent;\n      }\n      return depth;\n    }\n  }\n\n  widthsByHeight(): Array<number> {\n    return widthsByHeight(this);\n  }\n\n  height(): number {\n    return this.widthsByHeight().length - 1;\n  }\n\n  flattenByHeight(fn: Function | null = null): any[][] {\n    return flattenByHeight(this, fn);\n  }\n}\n\nexport default Node;\n","import {\n  NodeOrNull,\n  CreateOptions,\n  CreateOptionsWithCustomChildrenKey,\n  ObjectAnyProperties\n} from './types';\nimport Tree from './Tree';\nimport Node from './Node';\nimport { filterObject } from './utils';\n\nconst ID_KEY_DEFAULT = 'id';\nconst PARENT_ID_KEY_DEFAULT = 'parentId';\nconst CHILDREN_KEY_DEFAULT = 'children';\n\n/*\n * Create an array of objects representing a tree\n * Return array (as tree may have multiple roots).\n * Takes a flat array that looks like this:\n * [\n *   {\n *     id: 'sports',\n *     name: 'Sports',\n *     parentId: null\n *   },\n *   {\n *     id: 'ball',\n *     name: 'Ball',\n *     parentId: 'sports'\n *   },\n *   {\n *     id: 'non-ball',\n *     name: 'Non Ball',\n *     parentId: 'sports'\n *   },\n *   {\n *     id: 'tennis',\n *     name: 'Tennis',\n *     parentId: 'ball'\n *   }\n * ];\n * Returns a tree array that looks like this\n * [\n *   {\n *     \"id\": \"sports\",\n *     \"name\": \"Sports\",\n *     \"parentId\": null,\n *     \"children\": [\n *       {\n *         \"id\": \"ball\",\n *         \"name\": \"Ball\",\n *         \"parentId\": \"sports\",\n *         \"children\": [\n *           {\n *             \"id\": \"tennis\",\n *             \"name\": \"Tennis\",\n *             \"parentId\": \"ball\",\n *             \"children\": []\n *           }\n *         ]\n *       },\n *       {\n *         \"id\": \"non-ball\",\n *         \"name\": \"Non Ball\",\n *         \"parentId\": \"sports\",\n *         \"children\": []\n *       }\n *     ]\n *   }\n * ]\n */\nexport const createTreeArrayFromFlatArray = (\n  data: Array<ObjectAnyProperties>,\n  {\n    idKey = ID_KEY_DEFAULT,\n    parentIdKey = PARENT_ID_KEY_DEFAULT,\n    childrenKey = CHILDREN_KEY_DEFAULT\n  }: CreateOptionsWithCustomChildrenKey = {}\n): Array<ObjectAnyProperties> => {\n  const treeArray: Array<ObjectAnyProperties> = [];\n  const childrenOf = {};\n  data.forEach((obj: any) => {\n    const id = obj[idKey];\n    const parentId = obj[parentIdKey];\n    // obj may have children\n    childrenOf[id] = childrenOf[id] || [];\n    // init obj's children\n    obj[childrenKey] = childrenOf[id];\n    if (parentId) {\n      // init obj's parent's children object\n      childrenOf[parentId] = childrenOf[parentId] || [];\n      // push obj into its parent's children object\n      childrenOf[parentId].push(obj);\n    } else {\n      treeArray.push(obj);\n    }\n  });\n  return treeArray;\n};\n\n/*\n * Take an object that looks like a node, and turn it into a node.\n * Take all properties from obj that aren't in disallowedKeys and set as\n * 'data' on the node.\n */\nexport const objectToNode = (\n  obj: object,\n  parent: NodeOrNull = null,\n  {\n    idKey = ID_KEY_DEFAULT,\n    parentIdKey = PARENT_ID_KEY_DEFAULT,\n    childrenKey = CHILDREN_KEY_DEFAULT\n  }: CreateOptionsWithCustomChildrenKey = {}\n): Node => {\n  const disallowedKeys = [idKey, parentIdKey, childrenKey];\n  const data = filterObject(obj, { disallowedKeys });\n  if (parent) {\n    return parent.addChild(data, { id: obj[idKey] });\n  } else {\n    return new Node(data, { id: obj[idKey] });\n  }\n};\n\n/*\n * Create a node for each element in an array, then recursively create child nodes\n */\nexport const createNodes = (\n  data: Array<ObjectAnyProperties>,\n  parentNode: NodeOrNull = null,\n  opts: CreateOptionsWithCustomChildrenKey = {}\n): void => {\n  if (!data.length) {\n    return;\n  }\n  const { childrenKey = CHILDREN_KEY_DEFAULT } = opts;\n  data.forEach(obj => {\n    const node = objectToNode(obj, parentNode, opts);\n    // create all the nodes for the children of this node, with this node as parent\n    createNodes(obj[childrenKey], node, opts);\n  });\n};\n\n/*\n * Tree array to supply (example):\n * [\n *   {\n *     \"id\": \"sports\",\n *     \"name\": \"Sports\",\n *     \"parentId\": null,\n *     \"children\": [\n *       {\n *         \"id\": \"ball\",\n *         \"name\": \"Ball\",\n *         \"parentId\": \"sports\",\n *         \"children\": [\n *           {\n *             \"id\": \"tennis\",\n *             \"name\": \"Tennis\",\n *             \"parentId\": \"ball\",\n *             \"children\": []\n *           }\n *         ]\n *       },\n *       {\n *         \"id\": \"non-ball\",\n *         \"name\": \"Non Ball\",\n *         \"parentId\": \"sports\",\n *         \"children\": []\n *       }\n *     ]\n *   }\n * ]\n * Return a Tree instance\n */\nexport const createTreeFromTreeArray = (\n  data: Array<ObjectAnyProperties>,\n  opts: CreateOptionsWithCustomChildrenKey = {}\n): Tree => {\n  if (!data.length) {\n    return new Tree();\n  } else if (data.length > 1) {\n    // TODO: add this feature\n    throw new Error(\n      'Converting an array to tree only accepts an array with 0 or 1 node currently'\n    );\n  }\n  const { childrenKey = CHILDREN_KEY_DEFAULT } = opts;\n  const rootObj = data[0];\n  const root = objectToNode(rootObj, null, opts);\n  const tree = new Tree(root);\n  createNodes(rootObj[childrenKey], root, opts);\n  return tree;\n};\n\n/*\n * Map the supplied array of objects to what is required required for Node creation\n */\nconst mapFlatArray = (\n  data: Array<ObjectAnyProperties>,\n  { idKey, parentIdKey }: CreateOptions = {}\n): Array<ObjectAnyProperties> => {\n  if (idKey || parentIdKey) {\n    const disallowedKeys = [\n      ...(idKey ? [idKey] : []),\n      ...(parentIdKey ? [parentIdKey] : [])\n    ];\n    return data.map(obj => {\n      const newObj = filterObject(obj, { disallowedKeys });\n      idKey && (newObj[ID_KEY_DEFAULT] = obj[idKey]);\n      parentIdKey && (newObj[PARENT_ID_KEY_DEFAULT] = obj[parentIdKey]);\n      return newObj;\n    });\n  }\n  return data;\n};\n\n/*\n * Flat array to supply example:\n * [\n *   {\n *     id: 'sports',\n *     name: 'Sports',\n *     parentId: null\n *   },\n *   {\n *     id: 'ball',\n *     name: 'Ball',\n *     parentId: 'sports'\n *   },\n *   {\n *     id: 'non-ball',\n *     name: 'Non Ball',\n *     parentId: 'sports'\n *   },\n *   {\n *     id: 'tennis',\n *     name: 'Tennis',\n *     parentId: 'ball'\n *   }\n * ];\n */\nexport const createTreeFromFlatArray = (\n  data: Array<ObjectAnyProperties>,\n  opts: CreateOptions = {}\n): any => {\n  const mappedFlatArray = mapFlatArray(data, opts);\n  const treeArray: Array<ObjectAnyProperties> = createTreeArrayFromFlatArray(\n    mappedFlatArray\n  );\n  if (!treeArray.length) {\n    return new Tree();\n  } else if ((treeArray.length = 1)) {\n    return createTreeFromTreeArray(treeArray);\n  } else {\n    // TODO: add functionality\n    throw new Error(\n      'Converting an array to tree only accepts an array with 0 or 1 node currently'\n    );\n  }\n};\n"],"names":["nodeData","node","data","nodesData","nodes","map","hasChildren","Boolean","children","length","chars","Math","random","toString","substring","slice","generateChars","firstArrayElement","arr","Array","isArray","filterObject","obj","disallowedKeys","Object","keys","filter","key","includes","reduce","o","nodeToJsonFormatter","parent","id","value","label","parentId","child","nodeToObjectFormatter","widthsByHeight","counter","currentQueue","nextQueue","pop","push","flattenByHeight","fn","result","Tree","constructor","root","isChanged","this","_traverse","some","every","returnBoolean","returnArray","queueMethod","queue","results","didBreak","shift","lastResult","_traverseBreathFirst","opts","_traverseDepthFirst","traverseBreathFirst","traverseDepthFirst","someBreathFirst","someDepthFirst","everyBreathFirst","everyDepthFirst","findOneBreathFirst","findOneDepthFirst","findAllBreathFirst","findAllDepthFirst","flatMap","acc","flattenData","flattenDataByHeight","nodesAtHeight","height","countNodes","curr","maxWidth","max","toJson","toObject","Node","undefined","generateId","addChild","_removeChildren","removedChildren","removeChildren","removeChildrenByData","removeChildrenById","isLeaf","JSON","stringify","objectToSerialize","res","depth","currentNode","ID_KEY_DEFAULT","PARENT_ID_KEY_DEFAULT","CHILDREN_KEY_DEFAULT","createTreeArrayFromFlatArray","idKey","parentIdKey","childrenKey","treeArray","childrenOf","forEach","objectToNode","createNodes","parentNode","Error","rootObj","tree","createTreeFromFlatArray","mappedFlatArray","newObj","mapFlatArray","createTreeFromTreeArray"],"mappings":"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"}