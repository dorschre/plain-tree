{"version":3,"file":"index.mjs","sources":["../src/utils.ts","../src/utilsNodeTree.ts","../src/Tree.ts","../src/Node.ts","../src/create.ts"],"sourcesContent":["export const nodeData = (node: any): any => {\n  return node && 'data' in node ? node.data : node;\n};\n\nexport const nodesData = (nodes: Array<any>): any => {\n  return nodes.map(nodeData);\n};\n\nexport const hasChildren = (node: any): boolean => {\n  return Boolean(node && node.children && node.children.length);\n};\n\nconst generateChars = (length: number): string => {\n  const random11Chars = (): string =>\n    Math.random()\n      .toString(36)\n      .substring(2, 15);\n  let chars = '';\n  while (chars.length < length) {\n    chars += random11Chars();\n  }\n  return chars.slice(0, length);\n};\n\nexport const generateId = (): string => {\n  return generateChars(36);\n};\n\nexport const firstArrayElement = (arr: any): any => {\n  return Array.isArray(arr) && arr.length ? arr[0] : null;\n};\n\n/*\n * Return a new object without properties in disallowedKeys\n */\nexport const filterObject = (\n  obj: object,\n  { disallowedKeys = [] }: { disallowedKeys: Array<string> }\n): object => {\n  const filteredObj = Object.keys(obj)\n    .filter(key => !disallowedKeys.includes(key))\n    .reduce((o, key) => {\n      o[key] = obj[key];\n      return o;\n    }, {});\n  return filteredObj;\n};\n","/*\n * Common Node and Tree utilities\n */\nimport { NodeOrNull, SerializedNode } from './types';\nimport { hasChildren } from './utils';\nimport Node from './Node';\n\nexport const nodeToJsonFormatter = (node: Node): SerializedNode => {\n  const { parent, data, children, id } = node;\n  const obj: SerializedNode = {\n    data,\n    children,\n    id,\n    parentId: null\n  };\n  parent && (obj.parentId = parent.id);\n  obj.children = (node.children as Node[]).map(\n    (child: Node): SerializedNode => nodeToJsonFormatter(child)\n  );\n  return obj;\n};\n\nexport const widthsByHeight = (node: NodeOrNull): Array<number> => {\n  if (node === null) {\n    return [1];\n  } else {\n    const counter = [1];\n    let currentQueue = [node];\n    let nextQueue: NodeOrNull[] = [];\n    do {\n      while (currentQueue.length) {\n        const node = currentQueue.pop();\n        hasChildren(node) && nextQueue.push(...node.children);\n      }\n      if (nextQueue.length) {\n        counter[counter.length] = nextQueue.length;\n      }\n      [nextQueue, currentQueue] = [currentQueue, nextQueue];\n    } while (currentQueue.length);\n    return counter;\n  }\n};\n\nexport const flattenByHeight = (\n  node: NodeOrNull,\n  fn: Function | null = null\n): any[][] => {\n  let currentQueue = [node];\n  let nextQueue: NodeOrNull[] = [];\n  const result = [[fn(node)]];\n  do {\n    while (currentQueue.length) {\n      const node = currentQueue.pop();\n      hasChildren(node) && nextQueue.push(...node.children);\n    }\n    if (nextQueue.length) {\n      // explicit argument passing to fn to placate TypeScript\n      if (fn) {\n        result[result.length] = nextQueue.map(node => fn(node));\n      } else {\n        result[result.length] = nextQueue;\n      }\n    }\n    [nextQueue, currentQueue] = [currentQueue, nextQueue];\n  } while (currentQueue.length);\n  return result;\n};\n","import Node from './Node';\nimport { nodeData, hasChildren, firstArrayElement } from './utils';\nimport { widthsByHeight, flattenByHeight } from './utilsNodeTree';\nimport { NodeOrNull } from './types';\n\ntype TraverseReturn = void | boolean | Array<NodeOrNull>;\ntype TraverseOptions = {\n  some?: boolean;\n  every?: boolean;\n  returnBoolean?: boolean;\n  returnArray?: boolean;\n};\n\nclass Tree {\n  constructor(public root: NodeOrNull = null) {\n    this.root = root;\n  }\n\n  private _traverse(\n    fn: Function,\n    { some, every, returnBoolean, returnArray }: TraverseOptions = {},\n    queueMethod: string\n  ): TraverseReturn {\n    const queue = [this.root];\n    const results: Array<NodeOrNull> = [];\n    let didBreak = false;\n    let lastResult: undefined | boolean;\n    while (queue.length) {\n      const node = queue.shift();\n      hasChildren(node) && queue[queueMethod](...node.children);\n      if (some || every) {\n        const result = fn(node);\n        if (result && returnArray) {\n          results.push(node);\n        }\n        if ((every && !result) || (some && result)) {\n          didBreak = true;\n          lastResult = result;\n          break;\n        }\n      } else {\n        fn(node);\n      }\n    }\n    if (every) {\n      if (returnBoolean) {\n        return !didBreak;\n      } else if (returnArray) {\n        return results;\n      }\n    } else if (some) {\n      if (returnBoolean) {\n        return Boolean(lastResult);\n      } else if (returnArray) {\n        return results;\n      }\n    }\n  }\n\n  private _traverseBreathFirst(\n    fn: Function,\n    opts?: TraverseOptions\n  ): TraverseReturn {\n    return this._traverse(fn, opts, 'push');\n  }\n\n  private _traverseDepthFirst(\n    fn: Function,\n    opts?: TraverseOptions\n  ): TraverseReturn {\n    return this._traverse(fn, opts, 'unshift');\n  }\n\n  traverseBreathFirst(fn: Function): TraverseReturn {\n    this._traverseBreathFirst(fn);\n  }\n\n  /*\n   * Hit the bottom of the tree as fast as possible\n   * Then go up and get parent's children, then go down again\n   */\n  traverseDepthFirst(fn: Function): TraverseReturn {\n    this._traverseDepthFirst(fn);\n  }\n\n  /*\n   * Return true if a single node is truthy for fn, else false\n   * exit early on first truthy value\n   */\n  someBreathFirst(fn: Function): boolean {\n    return Boolean(\n      this._traverseBreathFirst(fn, {\n        some: true,\n        returnBoolean: true\n      })\n    );\n  }\n\n  /*\n   * Return true if a single node is truthy for fn, else false\n   * exit early on first truthy value\n   */\n  someDepthFirst(fn: Function): boolean {\n    return Boolean(\n      this._traverseDepthFirst(fn, {\n        some: true,\n        returnBoolean: true\n      })\n    );\n  }\n\n  /*\n   * Return true if result of function for every node is truthy\n   * exit early on first function falsey value\n   */\n  everyBreathFirst(fn: Function): boolean {\n    return Boolean(\n      this._traverseDepthFirst(fn, {\n        every: true,\n        returnBoolean: true\n      })\n    );\n  }\n\n  /*\n   * Return true if result of function for every node is truthy\n   * exit early on first function falsey value\n   */\n  everyDepthFirst(fn: Function): boolean {\n    return Boolean(\n      this._traverseDepthFirst(fn, { every: true, returnBoolean: true })\n    );\n  }\n\n  findOneBreathFirst(fn: Function): NodeOrNull {\n    const result = this._traverseBreathFirst(fn, {\n      some: true,\n      returnArray: true\n    });\n    return firstArrayElement(result);\n  }\n\n  findOneDepthFirst(fn: Function): NodeOrNull {\n    const result = this._traverseDepthFirst(fn, {\n      some: true,\n      returnArray: true\n    });\n    return firstArrayElement(result);\n  }\n\n  findAllBreathFirst(fn: Function): Array<NodeOrNull> {\n    const result = this._traverseBreathFirst(fn, {\n      every: true,\n      returnArray: true\n    });\n    return Array.isArray(result) ? result : [];\n  }\n\n  findAllDepthFirst(fn: Function): Array<NodeOrNull> {\n    const result = this._traverseDepthFirst(fn, {\n      every: true,\n      returnArray: true\n    });\n    return Array.isArray(result) ? result : [];\n  }\n\n  flatMap(fn: Function | null = null): Array<any> {\n    const acc: Array<any> = [];\n    this._traverseBreathFirst((node: Node) => {\n      (fn && acc.push(fn(node))) || acc.push(node);\n    });\n    return acc;\n  }\n\n  flattenData(): Array<any> {\n    return this.flatMap(nodeData);\n  }\n\n  flattenByHeight(fn: Function | null = null): any[][] {\n    return flattenByHeight(this.root, fn);\n  }\n\n  flattenDataByHeight(): any[][] {\n    return this.flattenByHeight(nodeData);\n  }\n\n  /*\n   * Get the width of each height of the tree from top to bottom\n   */\n  widthsByHeight(): Array<number> {\n    return widthsByHeight(this.root);\n  }\n\n  /*\n   * Root has height 0\n   */\n  nodesAtHeight(height: number): Array<NodeOrNull> {\n    const counter = this.root ? [1] : [];\n    let currentQueue = [this.root];\n    if (counter.length === height) {\n      return currentQueue;\n    }\n    let nextQueue: NodeOrNull[] = [];\n    do {\n      while (currentQueue.length) {\n        const node = currentQueue.pop();\n        hasChildren(node) && nextQueue.push(...node.children);\n      }\n      if (counter.length === height) {\n        return nextQueue;\n        break;\n      } else {\n        if (nextQueue.length) {\n          counter[counter.length] = nextQueue.length;\n        }\n        [nextQueue, currentQueue] = [currentQueue, nextQueue];\n      }\n    } while (currentQueue.length);\n    return [];\n  }\n\n  countNodes(): number {\n    return this.widthsByHeight().reduce((acc, curr) => acc + curr, 0);\n  }\n\n  maxWidth(): number {\n    return Math.max(...this.widthsByHeight());\n  }\n\n  height(): number {\n    return this.root ? this.root.height() : 0;\n  }\n\n  toJson(): string {\n    return this.root ? this.root.toJson() : '';\n  }\n}\n\nexport default Tree;\n","import { generateId } from './utils';\nimport {\n  nodeToJsonFormatter,\n  widthsByHeight,\n  flattenByHeight\n} from './utilsNodeTree';\nimport { NodeOrNull } from './types';\n\nclass Node {\n  data: any;\n  children: Node[] = [];\n  id: string;\n  value: string;\n  label: string;\n  parent: NodeOrNull;\n\n  constructor(\n    data: any,\n    { id, parent }: { id?: string; parent?: NodeOrNull } = {}\n  ) {\n    this.id = id !== undefined ? id : generateId();\n    this.parent = parent || null;\n    \n    this.value = id;\n    if (\"label\" in data){\n    this.label = data.label;\n    } else {this.label = id}\n    this.data = data;\n    this.children = [];\n  }\n\n  addChild(data: any, { id }: { id?: string } = {}): Node {\n    const node = new Node(data, { id, parent: this });\n    this.children.push(node);\n    return node;\n  }\n\n  private _removeChildren(fn: Function): Array<Node> {\n    const removedChildren: Array<Node> = [];\n    this.children = this.children.filter(node => {\n      if (fn(node)) {\n        removedChildren.push(node);\n        return false;\n      }\n      return true;\n    });\n    return removedChildren;\n  }\n\n  removeChildren(fn: Function): Array<Node> {\n    return this._removeChildren(fn);\n  }\n\n  removeChildrenByData(data: any): Array<Node> {\n    const fn: Function = (node: Node) => node.data === data;\n    return this._removeChildren(fn);\n  }\n\n  removeChildrenById(id: string): Array<Node> {\n    const fn: Function = (node: Node) => node.id === id;\n    return this._removeChildren(fn);\n  }\n\n  isLeaf(): boolean {\n    return this.parent !== null && !Boolean(this.children.length);\n  }\n\n  hasChildren(): boolean {\n    return Boolean(this.children.length);\n  }\n\n  toJson(): string {\n    const objectToSerialize = nodeToJsonFormatter(this);\n    return JSON.stringify(objectToSerialize);\n  }\n\n  depth(): number {\n    if (!this.parent) {\n      return 0;\n    } else {\n      let depth = 0;\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      let currentNode: Node = this;\n      while (currentNode.parent) {\n        depth += 1;\n        currentNode = currentNode.parent;\n      }\n      return depth;\n    }\n  }\n\n  widthsByHeight(): Array<number> {\n    return widthsByHeight(this);\n  }\n\n  height(): number {\n    return this.widthsByHeight().length - 1;\n  }\n\n  flattenByHeight(fn: Function | null = null): any[][] {\n    return flattenByHeight(this, fn);\n  }\n}\n\nexport default Node;\n","import {\n  NodeOrNull,\n  CreateOptions,\n  CreateOptionsWithCustomChildrenKey,\n  ObjectAnyProperties\n} from './types';\nimport Tree from './Tree';\nimport Node from './Node';\nimport { filterObject } from './utils';\n\nconst ID_KEY_DEFAULT = 'id';\nconst PARENT_ID_KEY_DEFAULT = 'parentId';\nconst CHILDREN_KEY_DEFAULT = 'children';\n\n/*\n * Create an array of objects representing a tree\n * Return array (as tree may have multiple roots).\n * Takes a flat array that looks like this:\n * [\n *   {\n *     id: 'sports',\n *     name: 'Sports',\n *     parentId: null\n *   },\n *   {\n *     id: 'ball',\n *     name: 'Ball',\n *     parentId: 'sports'\n *   },\n *   {\n *     id: 'non-ball',\n *     name: 'Non Ball',\n *     parentId: 'sports'\n *   },\n *   {\n *     id: 'tennis',\n *     name: 'Tennis',\n *     parentId: 'ball'\n *   }\n * ];\n * Returns a tree array that looks like this\n * [\n *   {\n *     \"id\": \"sports\",\n *     \"name\": \"Sports\",\n *     \"parentId\": null,\n *     \"children\": [\n *       {\n *         \"id\": \"ball\",\n *         \"name\": \"Ball\",\n *         \"parentId\": \"sports\",\n *         \"children\": [\n *           {\n *             \"id\": \"tennis\",\n *             \"name\": \"Tennis\",\n *             \"parentId\": \"ball\",\n *             \"children\": []\n *           }\n *         ]\n *       },\n *       {\n *         \"id\": \"non-ball\",\n *         \"name\": \"Non Ball\",\n *         \"parentId\": \"sports\",\n *         \"children\": []\n *       }\n *     ]\n *   }\n * ]\n */\nexport const createTreeArrayFromFlatArray = (\n  data: Array<ObjectAnyProperties>,\n  {\n    idKey = ID_KEY_DEFAULT,\n    parentIdKey = PARENT_ID_KEY_DEFAULT,\n    childrenKey = CHILDREN_KEY_DEFAULT\n  }: CreateOptionsWithCustomChildrenKey = {}\n): Array<ObjectAnyProperties> => {\n  const treeArray: Array<ObjectAnyProperties> = [];\n  const childrenOf = {};\n  data.forEach((obj: any) => {\n    const id = obj[idKey];\n    const parentId = obj[parentIdKey];\n    // obj may have children\n    childrenOf[id] = childrenOf[id] || [];\n    // init obj's children\n    obj[childrenKey] = childrenOf[id];\n    if (parentId) {\n      // init obj's parent's children object\n      childrenOf[parentId] = childrenOf[parentId] || [];\n      // push obj into its parent's children object\n      childrenOf[parentId].push(obj);\n    } else {\n      treeArray.push(obj);\n    }\n  });\n  return treeArray;\n};\n\n/*\n * Take an object that looks like a node, and turn it into a node.\n * Take all properties from obj that aren't in disallowedKeys and set as\n * 'data' on the node.\n */\nexport const objectToNode = (\n  obj: object,\n  parent: NodeOrNull = null,\n  {\n    idKey = ID_KEY_DEFAULT,\n    parentIdKey = PARENT_ID_KEY_DEFAULT,\n    childrenKey = CHILDREN_KEY_DEFAULT\n  }: CreateOptionsWithCustomChildrenKey = {}\n): Node => {\n  const disallowedKeys = [idKey, parentIdKey, childrenKey];\n  const data = filterObject(obj, { disallowedKeys });\n  if (parent) {\n    return parent.addChild(data, { id: obj[idKey] });\n  } else {\n    return new Node(data, { id: obj[idKey] });\n  }\n};\n\n/*\n * Create a node for each element in an array, then recursively create child nodes\n */\nexport const createNodes = (\n  data: Array<ObjectAnyProperties>,\n  parentNode: NodeOrNull = null,\n  opts: CreateOptionsWithCustomChildrenKey = {}\n): void => {\n  if (!data.length) {\n    return;\n  }\n  const { childrenKey = CHILDREN_KEY_DEFAULT } = opts;\n  data.forEach(obj => {\n    const node = objectToNode(obj, parentNode, opts);\n    // create all the nodes for the children of this node, with this node as parent\n    createNodes(obj[childrenKey], node, opts);\n  });\n};\n\n/*\n * Tree array to supply (example):\n * [\n *   {\n *     \"id\": \"sports\",\n *     \"name\": \"Sports\",\n *     \"parentId\": null,\n *     \"children\": [\n *       {\n *         \"id\": \"ball\",\n *         \"name\": \"Ball\",\n *         \"parentId\": \"sports\",\n *         \"children\": [\n *           {\n *             \"id\": \"tennis\",\n *             \"name\": \"Tennis\",\n *             \"parentId\": \"ball\",\n *             \"children\": []\n *           }\n *         ]\n *       },\n *       {\n *         \"id\": \"non-ball\",\n *         \"name\": \"Non Ball\",\n *         \"parentId\": \"sports\",\n *         \"children\": []\n *       }\n *     ]\n *   }\n * ]\n * Return a Tree instance\n */\nexport const createTreeFromTreeArray = (\n  data: Array<ObjectAnyProperties>,\n  opts: CreateOptionsWithCustomChildrenKey = {}\n): Tree => {\n  if (!data.length) {\n    return new Tree();\n  } else if (data.length > 1) {\n    // TODO: add this feature\n    throw new Error(\n      'Converting an array to tree only accepts an array with 0 or 1 node currently'\n    );\n  }\n  const { childrenKey = CHILDREN_KEY_DEFAULT } = opts;\n  const rootObj = data[0];\n  const root = objectToNode(rootObj, null, opts);\n  const tree = new Tree(root);\n  createNodes(rootObj[childrenKey], root, opts);\n  return tree;\n};\n\n/*\n * Map the supplied array of objects to what is required required for Node creation\n */\nconst mapFlatArray = (\n  data: Array<ObjectAnyProperties>,\n  { idKey, parentIdKey }: CreateOptions = {}\n): Array<ObjectAnyProperties> => {\n  if (idKey || parentIdKey) {\n    const disallowedKeys = [\n      ...(idKey ? [idKey] : []),\n      ...(parentIdKey ? [parentIdKey] : [])\n    ];\n    return data.map(obj => {\n      const newObj = filterObject(obj, { disallowedKeys });\n      idKey && (newObj[ID_KEY_DEFAULT] = obj[idKey]);\n      parentIdKey && (newObj[PARENT_ID_KEY_DEFAULT] = obj[parentIdKey]);\n      return newObj;\n    });\n  }\n  return data;\n};\n\n/*\n * Flat array to supply example:\n * [\n *   {\n *     id: 'sports',\n *     name: 'Sports',\n *     parentId: null\n *   },\n *   {\n *     id: 'ball',\n *     name: 'Ball',\n *     parentId: 'sports'\n *   },\n *   {\n *     id: 'non-ball',\n *     name: 'Non Ball',\n *     parentId: 'sports'\n *   },\n *   {\n *     id: 'tennis',\n *     name: 'Tennis',\n *     parentId: 'ball'\n *   }\n * ];\n */\nexport const createTreeFromFlatArray = (\n  data: Array<ObjectAnyProperties>,\n  opts: CreateOptions = {}\n): any => {\n  const mappedFlatArray = mapFlatArray(data, opts);\n  const treeArray: Array<ObjectAnyProperties> = createTreeArrayFromFlatArray(\n    mappedFlatArray\n  );\n  if (!treeArray.length) {\n    return new Tree();\n  } else if ((treeArray.length = 1)) {\n    return createTreeFromTreeArray(treeArray);\n  } else {\n    // TODO: add functionality\n    throw new Error(\n      'Converting an array to tree only accepts an array with 0 or 1 node currently'\n    );\n  }\n};\n"],"names":["nodeData","node","data","nodesData","nodes","map","hasChildren","Boolean","children","length","generateId","chars","Math","random","toString","substring","slice","generateChars","firstArrayElement","arr","Array","isArray","filterObject","obj","disallowedKeys","_ref$disallowedKeys","Object","keys","filter","key","includes","reduce","o","nodeToJsonFormatter","parent","id","parentId","child","currentQueue","nextQueue","_nextQueue","pop","push","counter","_ref","flattenByHeight","fn","result","_nextQueue2","apply","_ref2","Tree","root","this","_traverse","queueMethod","_temp","some","every","returnBoolean","returnArray","queue","results","didBreak","shift","lastResult","_traverseBreathFirst","opts","_traverseDepthFirst","traverseBreathFirst","_proto","traverseDepthFirst","someBreathFirst","someDepthFirst","everyBreathFirst","everyDepthFirst","findOneBreathFirst","findOneDepthFirst","findAllBreathFirst","findAllDepthFirst","flatMap","acc","flattenData","flattenDataByHeight","widthsByHeight","nodesAtHeight","height","countNodes","curr","maxWidth","max","toJson","Node","value","label","undefined","addChild","_temp2","_removeChildren","removedChildren","removeChildren","removeChildrenByData","removeChildrenById","isLeaf","objectToSerialize","JSON","stringify","depth","currentNode","_flattenByHeight","ID_KEY_DEFAULT","PARENT_ID_KEY_DEFAULT","CHILDREN_KEY_DEFAULT","createTreeArrayFromFlatArray","idKey","_ref$idKey","_ref$parentIdKey","parentIdKey","childrenKey","_ref$childrenKey","treeArray","childrenOf","forEach","objectToNode","_ref2$idKey","_ref2$parentIdKey","_ref2$childrenKey","createNodes","parentNode","_opts$childrenKey","_opts2$childrenKey","rootObj","tree","mappedFlatArray","_temp3","_ref3","newObj","mapFlatArray","createTreeFromTreeArray","Error"],"mappings":"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"}